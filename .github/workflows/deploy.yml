name: üöÄ Deploy Ragnarok MD Bot

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  NODE_ENV: production
  PORT: 3000

jobs:
  # Test and build validation
  test:
    name: ‚úÖ Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run tests
      run: npm test --if-present

    - name: Build verification
      run: npm run build --if-present

  # Security checks
  security:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: test
    if: success() && github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: npm audit
      run: npm audit --audit-level=moderate

    - name: Check for secrets
      uses: gitleaks/gitleaks-action@v2
      with:
        config-path: .gitleaks.toml

  # Main deployment job
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci --production

    - name: Create production environment file
      run: |
        cat > .env << EOF
        # Auto-generated - Do not commit
        BOT_TOKEN=${{ secrets.BOT_TOKEN }}
        CLIENT_ID=${{ secrets.CLIENT_ID }}
        GUILD_ID=${{ secrets.GUILD_ID }}
        SESSION_SECRET=${{ secrets.SESSION_SECRET }}
        SESSION_TIMEOUT=1800000
        MAX_SESSIONS_PER_USER=5
        NODE_ENV=production
        DEPLOYMENT_DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
        GIT_COMMIT=${{ github.sha }}
        EOF

    - name: Validate environment file
      run: |
        if [ ! -s .env ]; then
          echo "‚ùå .env file is empty or missing"
          exit 1
        fi
        echo "‚úÖ Environment file created successfully"

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        mkdir -p ~/.ssh
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to production server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        # Create directory if it doesn't exist
        mkdir -p /opt/ragnarok-bot
        
        # Navigate to directory
        cd /opt/ragnarok-bot
        
        # Stop existing bot if running
        if pm2 id ragnarok-bot > /dev/null; then
          pm2 stop ragnarok-bot
          pm2 delete ragnarok-bot
        fi
        
        # Remove old files and copy new ones
        rm -rf ./*
        EOF

        # Copy files to server
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='node_modules' \
          --exclude='.github' \
          ./ ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/opt/ragnarok-bot/

        # Execute remote setup commands
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        cd /opt/ragnarok-bot
        
        # Install production dependencies
        npm ci --only=production
        
        # Set proper permissions
        chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} .
        chmod -R 755 .
        
        # Start the bot with PM2
        export NODE_ENV=production
        pm2 start src/index.js --name "ragnarok-bot" \
          --log /var/log/ragnarok-bot.log \
          --time \
          --restart-delay=3000 \
          --max-memory-restart 512M
        
        # Save PM2 configuration
        pm2 save
        pm2 startup 2>/dev/null || true
        
        # Verify deployment
        sleep 5
        if pm2 status | grep -q "ragnarok-bot"; then
          echo "‚úÖ Bot deployed successfully!"
          echo "üìä PM2 Status:"
          pm2 show ragnarok-bot
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi
        EOF

    - name: Health check
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        # Check if bot is running
        if pm2 id ragnarok-bot > /dev/null; then
          echo "‚úÖ Health check passed - Bot is running"
          # Check recent logs for errors
          LOG_CHECK=$(pm2 logs ragnarok-bot --lines 10 --nostream | grep -i "error\|fail\|exception" || true)
          if [ -n "$LOG_CHECK" ]; then
            echo "‚ö†Ô∏è  Warnings in logs:"
            echo "$LOG_CHECK"
          else
            echo "üìù Logs look clean"
          fi
        else
          echo "‚ùå Health check failed - Bot not running"
          exit 1
        fi
        EOF

    - name: Send success notification
      if: success()
      uses: tsickert/discord-webhook@v5.1.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
        content: "üéâ **Deployment Successful** 
        **Ragnarok MD Bot** has been deployed to production!
        - ‚úÖ Version: ${{ github.sha }}
        - üïê Time: $(date -u)
        - üåê Environment: Production
        - üìä Status: Running smoothly"

    - name: Send failure notification
      if: failure()
      uses: tsickert/discord-webhook@v5.1.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
        content: "üö® **Deployment Failed** 
        **Ragnarok MD Bot** deployment failed!
        - ‚ùå Commit: ${{ github.sha }}
        - üïê Time: $(date -u)
        - üîç Check GitHub Actions for details"

  # Docker deployment alternative
  docker-deploy:
    name: üê≥ Docker Deployment
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && success()
    environment: production

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/ragnarok-bot:latest
          ${{ secrets.DOCKER_USERNAME }}/ragnarok-bot:${{ github.sha }}
        build-args: |
          NODE_ENV=production

    - name: Deploy Docker container
      run: |
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
        # Pull latest image
        docker pull ${{ secrets.DOCKER_USERNAME }}/ragnarok-bot:latest
        
        # Stop and remove old container
        docker stop ragnarok-bot || true
        docker rm ragnarok-bot || true
        
        # Run new container
        docker run -d \
          --name ragnarok-bot \
          --restart unless-stopped \
          -e BOT_TOKEN=${{ secrets.BOT_TOKEN }} \
          -e CLIENT_ID=${{ secrets.CLIENT_ID }} \
          -e SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
          -p 3000:3000 \
          ${{ secrets.DOCKER_USERNAME }}/ragnarok-bot:latest
        
        # Verify deployment
        sleep 10
        if docker ps | grep -q "ragnarok-bot"; then
          echo "‚úÖ Docker deployment successful!"
        else
          echo "‚ùå Docker deployment failed!"
          docker logs ragnarok-bot
          exit 1
        fi
        EOF

  # Cleanup on failure
  cleanup:
    name: üßπ Cleanup
    runs-on: ubuntu-latest
    if: always() && (failure() || cancelled())
    
    steps:
    - name: Notify cleanup
      run: echo "Cleaning up after failed or cancelled workflow"

    - name: Send cleanup notification
      if: failure() || cancelled()
      uses: tsickert/discord-webhook@v5.1.0
      with:
        webhook-url: ${{ secrets.DISCORD_WEBHOOK }}
        content: "‚ö†Ô∏è **Workflow ${{ job.status }}** 
        Deployment process was ${{ job.status.toLowerCase() }}
        - üîÑ Workflow: ${{ github.workflow }}
        - üìù Run ID: ${{ github.run_id }}
        - üïê Time: $(date -u)"
